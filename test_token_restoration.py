#!/usr/bin/env python3
"""
Script de test pour la restauration des points lors de l'expiration des tokens
"""

import os
import sys
import django
from datetime import timedelta

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aya_project.settings')
django.setup()

from django.utils import timezone
from qr_codes.models import ExchangeToken
from authentication.models import User
from qr_codes.tasks import cleanup_expired_tokens

def test_token_restoration():
    """Teste la restauration des points lors de l'expiration des tokens"""
    
    print("üß™ Test de restauration des points pour tokens expir√©s")
    print("=" * 60)
    
    # Cr√©er un utilisateur de test
    user, created = User.objects.get_or_create(
        email='test@example.com',
        defaults={
            'full_name': 'Test User',
            'available_points': 1000,
            'exchanged_points': 0
        }
    )
    
    if created:
        print(f"‚úÖ Utilisateur de test cr√©√©: {user.email}")
    else:
        print(f"‚úÖ Utilisateur de test existant: {user.email}")
    
    print(f"   Points disponibles: {user.available_points}")
    
    # Cr√©er un token expir√©
    expired_time = timezone.now() - timedelta(minutes=5)  # Expir√© il y a 5 minutes
    token = ExchangeToken.objects.create(
        user=user,
        points=100,
        token='TEST123456789',
        expires_at=expired_time,
        is_used=False
    )
    
    print(f"‚úÖ Token expir√© cr√©√©: {token.token}")
    print(f"   Points du token: {token.points}")
    print(f"   Expire √†: {token.expires_at}")
    print(f"   Est expir√©: {token.is_expired}")
    
    # V√©rifier les points avant nettoyage
    user.refresh_from_db()
    points_before = user.available_points
    print(f"   Points avant nettoyage: {points_before}")
    
    # Nettoyer les tokens expir√©s
    print("\nüßπ Nettoyage des tokens expir√©s...")
    cleanup_expired_tokens()
    
    # V√©rifier les points apr√®s nettoyage
    user.refresh_from_db()
    points_after = user.available_points
    print(f"   Points apr√®s nettoyage: {points_after}")
    
    # V√©rifier que les points ont √©t√© restaur√©s
    if points_after == points_before + token.points:
        print("‚úÖ Points restaur√©s avec succ√®s!")
    else:
        print(f"‚ùå Erreur: Points attendus {points_before + token.points}, obtenus {points_after}")
    
    # V√©rifier que le token a √©t√© supprim√©
    try:
        ExchangeToken.objects.get(token=token.token)
        print("‚ùå Token non supprim√©!")
    except ExchangeToken.DoesNotExist:
        print("‚úÖ Token supprim√© correctement!")
    
    # Nettoyer
    user.delete()
    print("\nüßπ Nettoyage termin√©")
    
    print("\n" + "=" * 60)
    print("‚úÖ Test termin√©")

if __name__ == "__main__":
    test_token_restoration()
